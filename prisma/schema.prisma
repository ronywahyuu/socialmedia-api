// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  posts    Post[]
  comments Comment[]
  likes    Like[]
  bookmarks Bookmark[]
}

model Post {
  id      Int        @id @default(autoincrement())
  title   String
  slug    String     @unique
  content String     @db.Text
  status  PostStatus @default(DRAFT)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  categories Category[] @relation("PostCategories")
  comments   Comment[]
  likes      Like[]
  bookmarks  Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostCategories")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String @db.Text

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Like {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Feedback {
  id Int @id @default(autoincrement())
  name String
  email String
  message String
  rating Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

